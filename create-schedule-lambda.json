import os, json, boto3, datetime
SCHEDULER_REGION = "us-east-1"

# 本処理 Lambda の ARN
TARGET_LAMBDA_ARN = "arn:aws:lambda:us-east-1:AccountID:function:EnableSSMDocPublicBlock"

# ここは IAM ロールの ARN（scheduler.amazonaws.com を信頼、lambda:InvokeFunction を許可）
SCHEDULE_ROLE_ARN = "arn:aws:iam::AccountID:role/schedule-creator-role"

DELAY_MIN = 1  # 初回だけ少し遅らせたい場合

scheduler = boto3.client("scheduler", region_name=SCHEDULER_REGION)

def _acct(event):
    d = event.get("detail", {}).get("serviceEventDetails", {}).get("createAccountStatus", {})
    return d.get("accountId") or event.get("account")

def lambda_handler(event, context):
    acct = _acct(event)
    if not acct:
        raise RuntimeError(f"accountId not found: {json.dumps(event)}")

    name = f"daily-ssm-docblock-{acct}"
    start = (datetime.datetime.now(datetime.timezone.utc)
             + datetime.timedelta(minutes=DELAY_MIN)).replace(microsecond=0)
    payload = json.dumps({"account": acct, "scheduleName": name})

    try:
        scheduler.create_schedule(
            Name=name,
            GroupName="default",
            ScheduleExpression="rate(1 day)",
            StartDate=start,
            FlexibleTimeWindow={"Mode": "OFF"},
            Target={
                "Arn": TARGET_LAMBDA_ARN,
                "RoleArn": SCHEDULE_ROLE_ARN,
                "Input": payload
            }
        )
        action = "created"
    except scheduler.exceptions.ConflictException:
        scheduler.update_schedule(
            Name=name,
            GroupName="default",
            ScheduleExpression="rate(1 day)",
            FlexibleTimeWindow={"Mode": "OFF"},
            Target={
                "Arn": TARGET_LAMBDA_ARN,
                "RoleArn": SCHEDULE_ROLE_ARN,
                "Input": payload
            }
        )
        action = "updated"

    return {"status": action, "account": acct, "schedule": name, "first_run": start.isoformat()}
