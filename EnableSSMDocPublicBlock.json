import json
import os
import time
import boto3
from botocore.exceptions import ClientError, EndpointConnectionError, NoCredentialsError

# ========= 環境変数 =========
TARGET_ROLE_NAME = os.environ.get("TARGET_ROLE_NAME", "OrganizationAccountAccessRole")

# 対象リージョン（カンマ区切り or "ALL"）
_TARGET_REGIONS_RAW = os.environ.get(
    "TARGET_REGIONS",
    "ap-northeast-1,ap-northeast-2,ap-northeast-3,us-east-1,us-east-2,us-west-1,us-west-2"
).strip()

# AssumeRoleリトライ
MAX_RETRIES = int(os.environ.get("MAX_RETRIES", "10"))
BASE_WAIT_SECONDS = int(os.environ.get("BASE_WAIT_SECONDS", "5"))

# ========= 定数 =========
SERVICE_SETTING_KEY = "ssm/documents/console/public-sharing-permission"  # Disable にする
UPDATE_VALUE = "Disable"  # パブリック共有をブロック（=Disable）

def _log(msg: str, **kw):
    print(json.dumps({"message": msg, **kw}, ensure_ascii=False))

def get_target_regions() -> list[str]:
    """
    TARGET_REGIONS=ALL なら、商用リージョンの SSM 対応リージョンをすべて返す。
    """
    if _TARGET_REGIONS_RAW.upper() != "ALL":
        return [r.strip() for r in _TARGET_REGIONS_RAW.split(",") if r.strip()]
    session = boto3.session.Session()
    return sorted(session.get_available_regions("ssm"))  # 商用リージョンのみ（Gov/China除外）

def parse_account_id_from_event(event: dict) -> str | None:
    """
    Organizations のイベントから子アカウントIDを抽出する。
    - CreateAccountResult（Service Event）: detail.serviceEventDetails.createAccountStatus.accountId
    - AcceptHandshake（API Call）: detail.requestParameters.target.id
    - InviteAccountToOrganization（API Call）: 同上（target.id）
    - CreateAccount（API Call）: detail.responseElements.createAccountStatus.accountId（早すぎて失敗しがちだが一応拾う）
    """
    detail = (event or {}).get("detail", {}) or {}
    a1 = detail.get("serviceEventDetails", {}).get("createAccountStatus", {}).get("accountId")
    if a1:
        return a1
    a2 = detail.get("requestParameters", {}).get("target", {}).get("id")
    if a2:
        return a2
    a3 = detail.get("responseElements", {}).get("createAccountStatus", {}).get("accountId")
    if a3:
        return a3
    return None

def assume_role_with_retry(account_id: str, role_name: str, session_name: str = "enable-ssm-publicblock"):
    """
    子アカウントのロールにAssumeRoleする。
    """
    sts = boto3.client("sts")
    role_arn = f"arn:aws:iam::{account_id}:role/{role_name}"
    for i in range(MAX_RETRIES):
        try:
            resp = sts.assume_role(RoleArn=role_arn, RoleSessionName=session_name)
            return resp["Credentials"]
        except ClientError as e:
            code = e.response.get("Error", {}).get("Code")
            _log("assume_role failed; will retry", attempt=i, code=code, roleArn=role_arn)
        except (EndpointConnectionError, NoCredentialsError) as e:
            _log("assume_role connection/credential error; will retry", attempt=i, error=str(e))
        if i == MAX_RETRIES - 1:
            raise
        time.sleep(BASE_WAIT_SECONDS * (2 ** i))

def build_setting_arn(region: str, account_id: str) -> str:
    return f"arn:aws:ssm:{region}:{account_id}:servicesetting/{SERVICE_SETTING_KEY}"

def ensure_public_sharing_disabled(creds: dict, region: str, account_id: str) -> str:
    """
    SSM ServiceSetting（public-sharing-permission）を Disable にする（すでに Disable なら何もしない）
    """
    ssm = boto3.client(
        "ssm",
        region_name=region,
        aws_access_key_id=creds["AccessKeyId"],
        aws_secret_access_key=creds["SecretAccessKey"],
        aws_session_token=creds["SessionToken"],
    )
    setting_arn = build_setting_arn(region, account_id)

    # 現在値の取得
    current_value = None
    try:
        res = ssm.get_service_setting(SettingId=setting_arn)
        current_value = res.get("ServiceSetting", {}).get("SettingValue")
    except ClientError as e:
        # ServiceSettingNotFoundExceptionなら未作成（= current_value=None）
        if e.response.get("Error", {}).get("Code") != "ServiceSettingNotFoundException":
            raise

    if current_value == UPDATE_VALUE:
        return f"{region}: already {UPDATE_VALUE}"

    # 常に実更新
    ssm.update_service_setting(SettingId=setting_arn, SettingValue=UPDATE_VALUE)
    return f"{region}: set {UPDATE_VALUE}"

def lambda_handler(event, context):
    _log("event received", event=event)

    account_id = parse_account_id_from_event(event)
    if not account_id:
        _log("account_id not found; skip", event=event)
        return {"status": "skip", "reason": "account_id not found"}

    # 残り実行時間チェック（ms 単位）
    def remaining_seconds():
        try:
            return context.get_remaining_time_in_millis() / 1000.0
        except Exception:
            return 900.0  # 取れないときは最大想定

    regions = get_target_regions()
    _log("target regions resolved", regions=regions)

    # 子アカウントに AssumeRole（伝播に備えてリトライ）
    creds = assume_role_with_retry(account_id, TARGET_ROLE_NAME)

    results = []
    for region in regions:
        if remaining_seconds() < 10:
            results.append(f"{region}: skipped due to low remaining time")
            break
        try:
            results.append(ensure_public_sharing_disabled(creds, region, account_id))
        except ClientError as e:
            code = e.response.get("Error", {}).get("Code")
            results.append(f"{region}: ERROR {code}")
            _log("update_service_setting error", region=region, code=code, error=str(e))
        except Exception as e:
            results.append(f"{region}: ERROR {str(e)}")
            _log("update_service_setting unexpected error", region=region, error=str(e))

    _log("finished", accountId=account_id, results=results)
    return {"status": "ok", "account": account_id, "results": results}
